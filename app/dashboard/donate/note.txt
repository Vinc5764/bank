could you refactor this code so that the data in the object being recieved is populated . But only populate these : firsname ,last name , role , email, date. The data has been fetched but can you alter the design to suite the data coming and also let it be populated because what is there is static data.Also the data fetched should update the setmember state not the new members also the after it is updatated the data populated should be from the member state . The newmember state is there if you click on the contribute or the add new member.




{
        "role": "member",
        "_id": "66a4f247887c45e58407e7eb",
        "clerkId": "user_2jpZPSKSgLmEaWxcU9ltSv6jSl5",
        "firstName": null,
        "lastName": null,
        "email": "simonadjei70@gmail.com",
        "date": "2024-07-27T13:12:39.092Z",
        "__v": 0
    },



/**
 * v0 by Vercel.
 * @see https://v0.dev/t/855jet0dLAX
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
"use client";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
  DialogFooter,
} from "@/components/ui/dialog";

import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";

import { Button } from "@/components/ui/button";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import Link from "next/link";

const member = [
  {
    name: "Jane Doe",
    role: "Software Engineer",
    email: "jane.doe@example.com",
    phone: "+1 (555) 555-5555",
    avatar: "/placeholder-user.jpg",
  },
  {
    name: "Bob Smith",
    role: "Product Manager",
    email: "bob.smith@example.com",
    phone: "+1 (555) 555-5556",
    avatar: "/placeholder-user.jpg",
  },
  {
    name: "Sarah Lee",
    role: "UI/UX Designer",
    email: "sarah.lee@example.com",
    phone: "+1 (555) 555-5557",
    avatar: "/placeholder-user.jpg",
  },
];

import React, { useEffect, useState } from "react";
import Image from "next/image";

export default function UserDash() {
  const [members, setMembers] = useState(member);
  const [newMember, setNewMember] = useState({
    name: "",
    email: "",
    password: "",
    constituency: "",
    contactNumber: "",
  });
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);

  useEffect(() => {
    const fetchMembers = async () => {
      try {
        const response = await fetch("http://localhost:3000/api/register");
        if (!response.ok) {
          throw new Error("Failed to fetch members");
        }
        const data = await response.json();
        // setMembers(data);
      } catch (error) {
        console.error(error.message);
      }
    };

    fetchMembers();
  }, []);

  const handleInputChange = (e) => {
    const { id, value } = e.target;
    setNewMember((prev) => ({ ...prev, [id]: value }));
  };

  const handleFormSubmit = async (e: any) => {
    e.preventDefault();
    // Add new member to the list
    const response = await fetch("http://localhost:3000/api/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newMember),
    });

    if (!response.ok) {
      throw new Error("Failed to add member");
    }

    // Parse the response if needed
    const result = await response.json();

    // Update members list
    // setMembers((prev) => [...prev, result.newMember]);

    // Clear form fields
    setNewMember({
      name: "",
      email: "",
      password: "",
      constituency: "",
      contactNumber: "",
    });
    // Show success modal
    setIsSuccessModalOpen(true);
  };

  const closeSuccessModal = () => {
    setIsSuccessModalOpen(false);
  };

  return (
    <div className="flex flex-col w-full min-h-screen bg-muted/40">
      <header className="flex flex-col items-center gap-[150px] bg-background px-4 py-8 sm:px-6 md:flex-row justify-center md:py-12">
        <div className="flex flex-col items-center gap-4">
          <Image
            src="/placeholder.svg"
            alt="User Profile"
            width={128}
            height={128}
            className="rounded-full border-2 "
            style={{ aspectRatio: "128/128", objectFit: "cover" }}
          />
          <div className="grid gap-1 text-center">
            <div className="text-2xl text-[#A4167A] font-bold">John Doe</div>
            <div className="text-sm text-muted-foreground">
              Software Engineer
            </div>
          </div>
        </div>
        <div className="flex flex-col items-center gap-2 sm:flex-row">
          <Link href="/dashboard/engage">
            <Button size="lg" className="bg-[#A4167A] hover:bg-[#A4167A]">
              Engage
            </Button>
          </Link>
          <Button
            size="lg"
            className="bg-white text-black hover:bg-white border-black border-2 "
          >
            Contribute
          </Button>
        </div>
      </header>
      <main className="flex-1 p-4 sm:p-6">
        <div className="max-w-4xl mx-auto grid gap-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-bold">Members</h2>

            <Dialog>
              <DialogTrigger asChild>
                <Button size="sm" className="bg-purple-950 hover:bg-purple-950">
                  <PlusIcon className="w-4 h-4 mr-2" />
                  Add Member
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                  <DialogTitle>Create a new account</DialogTitle>
                  <DialogDescription>
                    Enter your details below to get started.
                  </DialogDescription>
                </DialogHeader>
                <form className="grid gap-4 py-4" onSubmit={handleFormSubmit}>
                  <div className="grid gap-2">
                    <Label htmlFor="name">Name</Label>
                    <Input
                      id="name"
                      value={newMember.name}
                      onChange={handleInputChange}
                      placeholder="John Doe"
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={newMember.email}
                      onChange={handleInputChange}
                      placeholder="john@example.com"
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="password">Password</Label>
                    <Input
                      id="password"
                      type="password"
                      value={newMember.password}
                      onChange={handleInputChange}
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="constituency">Constituency</Label>
                    <Input
                      id="constituency"
                      value={newMember.constituency}
                      onChange={handleInputChange}
                      placeholder="Enter your constituency"
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="contactNumber">Contact Number</Label>
                    <Input
                      id="contactNumber"
                      type="tel"
                      value={newMember.contactNumber}
                      onChange={handleInputChange}
                      placeholder="123-456-7890"
                    />
                  </div>
                  <Button type="submit" className="w-full">
                    Create Account
                  </Button>
                </form>
              </DialogContent>
            </Dialog>
          </div>
          <div className="overflow-auto">
            <Table className="w-full">
              <TableHeader>
                <TableRow>
                  <TableHead className="md:w-[200px]">Name</TableHead>
                  <TableHead className="hidden md:table-cell">Role</TableHead>
                  <TableHead className="hidden md:table-cell">Email</TableHead>
                  <TableHead className="hidden md:table-cell">Phone</TableHead>
                  <TableHead>
                    <span className="sr-only">Actions</span>
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {members.map((member) => (
                  <TableRow key={member.email}>
                    <TableCell>
                      <div className="flex items-center gap-4">
                        <Avatar className="w-12 h-12">
                          <AvatarImage src={member.avatar} alt={member.name} />
                          <AvatarFallback>{member.name[0]}</AvatarFallback>
                        </Avatar>
                        <div className="grid gap-1">
                          <div className="font-medium">{member.name}</div>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell className="hidden md:table-cell">
                      {member.role}
                    </TableCell>
                    <TableCell className="hidden md:table-cell">
                      <div className="flex items-center gap-2">
                        <MailIcon className="w-4 h-4 text-muted-foreground" />
                        <div className="text-sm text-muted-foreground">
                          {member.email}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell className="hidden md:table-cell">
                      <div className="flex items-center gap-2">
                        <PhoneIcon className="w-4 h-4 text-muted-foreground" />
                        <div className="text-sm text-muted-foreground">
                          {member.contactNumber}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="ml-auto bg-[#A4167A] hover:bg-purple-950"
                          >
                            <MoveHorizontalIcon className="" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem>View Profile</DropdownMenuItem>
                          <DropdownMenuItem>Remove Member</DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </div>
      </main>

      {/* Success Modal */}
      <Dialog open={isSuccessModalOpen} onOpenChange={closeSuccessModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Success</DialogTitle>
            <DialogDescription>
              The new member has been added successfully.
            </DialogDescription>
            <DialogFooter>
              <Button onClick={closeSuccessModal}>Close</Button>
            </DialogFooter>
          </DialogHeader>
        </DialogContent>
      </Dialog>
    </div>
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
function MailIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="20" height="16" x="2" y="4" rx="2" />
      <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" />
    </svg>
  );
}

function MoveHorizontalIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="white"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="18 8 22 12 18 16" />
      <polyline points="6 8 2 12 6 16" />
      <line x1="2" x2="22" y1="12" y2="12" />
    </svg>
  );
}

function PhoneIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
    </svg>
  );
}

function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}